""" Demonstrates use of guitk.TreeView widget with callbacks"""

import guitk
import pathlib


class ShowMeATree(guitk.Window):
    def config(self):
        self.title = "Tree View"
        self.layout = [
            [
                guitk.Treeview(
                    key="TREE",
                    headings=["Filename", "Size"],
                    show="headings",
                    vscrollbar=True,
                )
            ]
        ]

    def list_files(self, path, tree):
        files = pathlib.Path(path).iterdir()
        pyfiles = []
        for f in files:
            if f.suffix == ".py":
                pyfiles.append(str(f))
                tags = ["pyfile"]
            else:
                tags = []
            tree.insert(
                "",
                "end",
                iid=str(f),
                tags=tags,
                text=str(f),
                values=(str(f), f.stat().st_size),
            )
        tree.selection_set(pyfiles)

    def setup(self):
        self.data = {
            "tree_sort_size_reverse": False,
            "tree_sort_filename_reverse": False,
        }
        self.list_files(".", self["TREE"].tree)
        tree = self["TREE"]
        tree.bind_heading("Size", "TREE_SIZE", command=self.on_sort_size)
        tree.bind_heading("Filename", "TREE_FILENAME", command=self.on_sort_filename)
        tree.bind_tag("pyfile", "PYTHON_FILE", sequence="<Return>", command=self.on_tag)

        # <<TreeviewSelect>> is a tk virtual event generated by the tree widget when item(s) are selected
        # reference https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Treeview
        tree.bind_event("<<TreeviewSelect>>", command=self.on_select)

    def on_select(self):
        print(f"You selected file(s): {self['TREE'].value}")

    def on_tag(self):
        print(f"python file: {self['TREE'].value}")

    def on_sort_size(self):
        self["TREE"].sort_on_column(
            "Size",
            reverse=self.data["tree_sort_size_reverse"],
            key=lambda x: int(x[0]),
        )
        self.data["tree_sort_size_reverse"] = not self.data["tree_sort_size_reverse"]

    def on_sort_filename(self):
        self["TREE"].sort_on_column(
            "Filename", reverse=self.data["tree_sort_filename_reverse"]
        ),
        self.data["tree_sort_filename_reverse"] = not self.data[
            "tree_sort_filename_reverse"
        ]


if __name__ == "__main__":
    ShowMeATree().run()
